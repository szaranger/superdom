var Dom = (function () {
	'use strict';

	return function (elements) {
		if(elements.constructor !== NodeList) {
			this.elements = [elements]; // if an Object
		} else {
			this.elements = elements[0] ? Array.prototype.slice.call(elements) : [];
		}

		this.callee = elements.callee;
		this.selector = elements.selector;
	}

})();

DOM = (function () {
	'use strict';

	var dom = {
		query: function (selector) {
			var el,
				dom;

			el = Mixin.isObject(selector) ? selector : document.querySelectorAll(selector);

			dom = new Dom(el);
			dom.callee = 'query';
			dom.selector = selector;

			return dom;
		},

		get: function (id) {
			var el,
				dom;

			el = document.getElementById(id);
			dom = new Dom([el]);
			dom.callee = 'get';
			dom.selector = id;

			return dom;
		},

		create: function (html) {
			var parser = new DOMParser(),
				el,
				dom;

			if(html && typeof html === 'string') {
				el = parser.parseFromString(html, "text/xml").firstChild;
				dom = new Dom([el]);
				dom.callee = 'create';
			}

			return dom;
		}
};

	return dom;
})();

if(!window.$) {
	$ = DOM.query;
}
;var Mixin = (function() {
  'use strict';

  var mixin = {

    get duration() {
      var duration = arguments[0],
        def = arguments[1],
        slow = arguments[2],
        fast = arguments[3];

      if (typeof duration === 'string') {
        if (duration === 'slow') {
          duration = slow;
        } else if (duration === 'fast') {
          duration = fast;
        } else {
          duration = def;
        }
      }
      return duration;
    },

    objectFromArray: function(array) {
      var object = {};

      array.forEach(function(prop) {
        object[prop] = undefined;
      });

      return object;
    },

    isObject: function(el) {
      return typeof(el) === 'object';
    },

    slice: function(array) {
      return Array.prototype.slice.call(array);
    },

    forEachProperty: function(object, fn) {
      var key,
        value,
        index = -1;

      if(typeof object === 'object') {
        for(var prop in object) {
          if(object.hasOwnProperty(prop)) {
            key = prop;
            value = object[prop];
            ++index;

            fn.call(this, key, value, index);
          }
        }
      }
    }
  };

  return mixin;
})();
;(function() {
  'use strict';

  DOM.ajax = function(options) {
    var request = new XMLHttpRequest();
    type = options.type || 'POST',
      url = options.url || '/',
      data = options.data || '',
      successFn = options.success || emptyFn,
      errorFn = optiosn.error || emptyFn;

    if (type === 'POST') {
      request.open('POST', url, true);
      request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');

      request.send(data);
    }

    if (type === 'GET') {
      request.open('GET', url, true);

      request.onload = function() {
        if (request.status >= 200 && request.status < 400) {
          // Success!
          var response = request.responseText;
          successFn(reponse);
        } else {
          // We reached our target server, but it returned an error
          errorFn();
        }
      };

      request.onerror = function() {
        // There was a connection error of some sort
        errorFn();
      };

      request.send();
    }
  };

})();
;(function() {
  'use strict';

  DOM.param = function(object) {
    var url = Object.keys(object).map(function(key) {
        return encodeURIComponent(key) + '=' + encodeURIComponent(object[key])
    }).join('&');

    return url;
  };

})();
;(function() {
  'use strict';

  DOM.getJSON = function(options) {
    var request = new XMLHttpRequest();
      type = 'GET',
      url = options.url || '/',
      successFn = options.success || emptyFn,
      errorFn = optiosn.error || emptyFn;

    if (type === 'GET') {
      request.open('GET', url, true);

      request.onload = function() {
        var data;

        if (request.status >= 200 && request.status < 400) {
          // Success!
          data = JSON.parse(request.responseText);
          successFn(data);
        } else {
          // We reached our target server, but it returned an error
          errorFn();
        }
      };

      request.onerror = function() {
        // There was a connection error of some sort
        errorFn();
      };

      request.send();
    }
  };

})();
;(function() {
  'use strict';

  Dom.prototype.hasClass = function(className) {
    return this.elements.some(function(element) {
      if (element.classList) {
        return element.classList.contains(className);
      } else {
        return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);
      }
    });
  };

  Dom.prototype.addClass = function(className) {
    if (className && this.elements[0]) {
      this.elements.forEach(function(element) {
        if (element.classList) {
          element.classList.add(className);
        } else {
          element.className += ' ' + className;
        }
      });
    }
    return new Dom(this.elements);
  };

  Dom.prototype.removeClass = function(className) {
    this.elements.forEach(function(element) {
      if (className) {
        if (element.classList) {
          element.classList.remove(className);
        } else {
          element.className = element.className.replace(new RegExp(
            '(^|\\b)' +
            className.split(' ').join('|') +
            '(\\b|$)', 'gi'),
            ' ');
        }
      } else {
        element.className = '';
      }
    });

    return new Dom(this.elements);
  };

  Dom.prototype.toggleClass = function(className) {
    var classes,
      existingIndex;

    if(className) {
      this.elements.forEach(function(element) {
        if (element.classList) {
          element.classList.toggle(className);
        } else {
          classes = element.className.split(' '),
          existingIndex = classes.indexOf(className);

          if (existingIndex >= 0)
            classes.splice(existingIndex, 1);
          else
            classes.push(className);

          element.className = classes.join(' ');
        }
      });
    }

    return new Dom(this.elements);
  };

})();
;(function() {
  'use strict';

  Dom.prototype.css = function(style, value) {
    var styles = [];

    if (style) {
      this.elements.forEach(function(element) {
        var computedStyle = document.defaultView.getComputedStyle(element);

        if (value) {
          element.style[style] = value;
        } else {
          styles.push(computedStyle.getPropertyValue(style));
        }
      });

      return !value ?
        (this.callee === 'get' ? styles[0] : styles) : new Dom(this.elements);
    }
  };

  Dom.prototype.height = function(value) {
    return getDimension.call(this, 'height', value);
  };

  Dom.prototype.width = function(value) {
    return getDimension.call(this, 'width', value);
  };

  Dom.prototype.innerWidth = function() {
    var element = this.elements[0];

    if(element) {
      return element.clientWidth;
    }
  };

  Dom.prototype.innerHeight = function() {
    var element = this.elements[0];

    if(element) {
      return element.clientHeight;
    }
  };

  Dom.prototype.outerWidth = function(withMargin) {
    var element = this.elements[0],
      margin = 0;

    if(element) {
      if(withMargin) {
        margin = (element.offsetWidth - element.clientWidth) * 2;
      }
      return element.offsetWidth + margin;
    }
  };

  Dom.prototype.outerHeight = function(withMargin) {
    var element = this.elements[0],
      margin = 0;

    if(element) {
      if(withMargin) {
        margin = (element.offsetHeight - element.clientHeight) * 2;
      }
      return element.offsetHeight + margin;
    }
  };

  Dom.prototype.offset = function() {
    var element = this.elements[0],
      rect;

    if(element) {
      rect = el.getBoundingClientRect();

      return {
        top: rect.top + document.body.scrollTop,
        left: rect.left + document.body.scrollLeft
      }
    }
  };

  Dom.prototype.position = function() {
    var element = this.elements[0];

    if(element) {
      return {
        top: element.offsetTop,
        left: element.offsetLeft
      };
    }
  };

  Dom.prototype.scrollLeft = function(position) {
    var element = this.elements[0];

    if(element) {
      if(position) {
        element.scrollLeft = position;
      }
      return element.scrollLeft;
    }
  };

  Dom.prototype.scrollTop = function(position) {
    var element = this.elements[0];

    if(element) {
      if(position) {
        element.scrollTop = position;
      }
      return element.scrollTop;
    }
  };

  function getDimension(dimension, value) {
    var element,
      computedStyle;

    if(value) {
      if(typeof value === 'number') {
        this.elements.forEach(function(element) {
          element.style[dimension] = value + 'px';
        });
      }
      return new Dom(this.elements);
    } else {
      element = this.elements[0];

      if(element) {
        computedStyle = document.defaultView.getComputedStyle(element)
        return parseInt(computedStyle.getPropertyValue(dimension).split('px')[0]);
      }
    }
  }

})();
;(function() {
  'use strict';

  DOM.data = function() {
    var args = Mixin.slice(arguments),
      prefix = 'data-dom-',
      object,
      element,
      key,
      value;

    if (args.length === 3) {
      element = args[0];
      key = args[1];
      value = args[2];

      element.setAttribute(prefix + key, value);
    }

    if (args.length === 2) {
      element = args[0];
      object = args[1];

      Mixin.forEachProperty(object, function(key, value) {
        element.setAttribute(prefix + key, value);
      });
    }

    if (args.length === 1) {
      key = args[0];
      value = prefix + key;
      element = document.querySelector('[' + value + ']');

      return element.getAttribute(value);
    }
  };

})();
;(function() {
  'use strict';

  Dom.prototype.hide = function() {
    this.elements.forEach(function(element) {
      element.style.display = 'none';
    });
  };

  Dom.prototype.show = function() {
    this.elements.forEach(function(element) {
      element.style.display = 'block';
    });
  };

  Dom.prototype.toggle = function() {
    var display;

    this.elements.forEach(function(element) {
      display = element.style.display;
      element.style.display = display === 'block' ? 'none' : 'block';
    });
  };

})();;(function() {
  'use strict';

  Dom.prototype.animate = function(styles, duration, easing, callback) {
    var values = [];

    this.elements.forEach(function(element) {
      if (styles) {
        for (var property in styles) {
          if (styles.hasOwnProperty(property)) {

            duration = Mixin.duration(duration, 400, 150, 400);

            animate({
              delay: 10,
              duration: duration || 400,
              delta: function(progress) {
                if (easing) {
                  for (var property in easing) {
                    switch (easing[property]) {
                      case 'easeIn':
                        progress = 1 - Math.sin(Math.acos(progress));
                        break;
                      case 'easeOut':
                        progress = 1 - delta(1 - progress);
                        break;
                      case 'easeInOut':
                        progress = progress < .5 ?
                          delta(2 * progress) / 2 :
                          (2 - delta(2 * (1 - progress))) / 2;
                        break;
                    }
                  }
                }
                return progress;
              },
              step: function(delta) {
                var oldValue = element.style[property].split('px')[0],
                  calculatedValue = styles[property] * delta,
                  newValue = styles[property];

                if (oldValue < newValue && oldValue < calculatedValue) {
                  element.style[property] = styles[property] * delta + "px";
                } else {
                  if (oldValue > newValue) {
                    element.style[property] = oldValue - (styles[property] * delta) + "px";
                  }
                }
              }
            });

          }
        }
      }
    });

    return new Dom(this.elements);
  };

  function animate(options) {
    var start = new Date(),
      delta,
      id;

    var id = setInterval(function() {
      var timePassed = new Date() - start,
        progress = timePassed / options.duration;

      if (progress > 1) {
        progress = 1;
      }

      delta = options.delta(progress);
      options.step(delta);

      if (progress === 1) {
        clearInterval(id);
      }
    }, options.delay || 10);
  }

})();
;(function() {
  'use strict';

  Dom.prototype.fadeIn = function(duration, callback) {

    this.elements.forEach(function(element) {
      fade(element, duration, 'in', callback);
    });

    return new Dom(this.elements);
  }

  Dom.prototype.fadeOut = function(duration, callback) {

    this.elements.forEach(function(element) {
      fade(element, duration, 'out', callback);
    });

    return new Dom(this.elements);
  }

  Dom.prototype.fadeToggle = function(duration, callback) {

    this.elements.forEach(function(element) {
      toggle(element, duration, callback);
    });

    return new Dom(this.elements);
  };

  function toggle (element, duration, callback) {
    fade(element, duration, element.style.opacity !== '0' ? 'out' : 'in', callback);
  }

  function fade(element, duration, direction, callback) {
    var style = element.style,
      frameRate = 10,
      opacity,
      totalFrames,
      second = 1000,
      duration = duration || 100,
      interval = second / frameRate,
      elementOpacity = element.opacity,
      finalOpacity,
      opacityIncrement;

    if (duration < 10) {
      duration = 10;
    }

    duration = Mixin.duration(duration, 100, 150, 50);

    totalFrames = duration / frameRate;

    if (direction === 'in') {
      if (style.opacity === '1') {
        return;
      }
      opacity = 0;
      finalOpacity = 1;
      style.opacity = '0';
      opacityIncrement = finalOpacity / totalFrames;
    } else {
      if (style.opacity === '0') {
        return;
      }
      opacity = 1;
      finalOpacity = 0;
      opacityIncrement = opacity / totalFrames;
    }

    var tween = function() {
      if (direction === 'in') {
        opacity += opacityIncrement;
        style.opacity = opacity;
        if (opacity < finalOpacity) {
          setTimeout(tween, interval);
        } else {
          style.opacity = '1';
          if (callback) {
            callback();
          }
        }
      } else {
        opacity -= opacityIncrement;
        style.opacity = opacity;
        if (opacity > finalOpacity) {
          setTimeout(tween, interval);
        } else {
          style.opacity = '0';
          if (callback) {
            callback();
          }
        }
      }
    };

    tween();

  }
})();
;(function() {
  'use strict';

  Dom.prototype.slideDown = function(duration, callback) {
    var elements = [];

    this.elements.forEach(function(element) {
      slide(element, duration, 'down', callback);
    });

    return new Dom(elements);
  };

  Dom.prototype.slideUp = function(duration, callback) {
    var elements = [];

    this.elements.forEach(function(element) {
      slide(element, duration, 'up', callback);
    });

    return new Dom(elements);
  };

  Dom.prototype.slideToggle = function(duration, callback) {
    var elements = [];

    this.elements.forEach(function(element) {
      toggle(element, duration, callback);
    });

    return new Dom(elements);
  };

  function toggle (element, duration, callback) {
    slide(element, duration, element.offsetHeight !== 0 ? 'up' : 'down', callback);
  }

  function slide(element, duration, direction, callback) {
    var style = element.style,
      frameRate = 10,
      height,
      totalFrames,
      second = 1000,
      duration = duration || 400,
      interval = second / frameRate,
      elementHeight = element.offsetHeight,
      finalHeight,
      heightIncrement;

    if (duration < 10) {
      duration = 10;
    }

    duration = Mixin.duration(duration, 400, 600, 200);

    totalFrames = duration / frameRate;

    if (direction === 'down') {
      if (elementHeight !== 0) {
        return;
      }
      height = 0;
      finalHeight = style.height.split('px')[0];
      style.display = 'block';
      style.height = '0px';
      heightIncrement = finalHeight / totalFrames;
    } else {
      if (elementHeight === 0) {
        return;
      }
      height = elementHeight;
      finalHeight = 0;
      heightIncrement = height / totalFrames;
    }

    var tween = function() {
      if (direction === 'down') {
        height += heightIncrement;
        style.height = height + 'px';
        if (height < finalHeight) {
          setTimeout(tween, interval);
        } else {
          if(callback) {
            callback();
          }
        }
      } else {
        height -= heightIncrement;
        style.height = height + 'px';
        if (height > finalHeight) {
          setTimeout(tween, interval);
        } else {
          style.display = 'none';
          style.height = elementHeight + 'px';
          if(callback) {
            callback();
          }
        }
      }
    };

    tween();

  }

})();
;(function() {
  'use strict';

  /*
    $(window).resize(function() { console.log('resized');});
  */
  Dom.prototype.resize = function(handler) {
    if (handler){
      this.elements.forEach(function (element) {
        element.addEventListener('resize', handler, false);
      });
    }
  };

  /*
    $(window).scroll(function() { console.log('scrolled');});
  */
  Dom.prototype.scroll = function(handler) {
    if (handler){
      this.elements.forEach(function (element) {
        element.addEventListener('scroll', handler);
      });
    }
  };

})();
;(function() {
  'use strict';

  Dom.prototype.ready = function(fn) {
    if (document.readyState != 'loading'){
      fn();
    } else {
      document.addEventListener('DOMContentLoaded', fn);
    }
  };

  Dom.prototype.load = function(handler) {
    if (handler){
      this.elements.forEach(function (element) {
        element.addEventListener('load', handler);
      });
    }
  };

  Dom.prototype.unload = function(handler) {
    if (handler){
      this.elements.forEach(function (element) {
        element.addEventListener('unload', handler);
      });
    }
  };

})();
;(function() {
  'use strict';

  Dom.prototype.bind = function(eventType, handler) {
    if (eventType && handler){
      this.elements.forEach(function (element) {
        element.addEventListener(eventType, handler, false);
      });
    }
  };

})();
;(function() {
  'use strict';

  Dom.prototype.click = function(callback) {
    this.elements.forEach(function (element) {
      element.onclick = callback;
    });
  };

  Dom.prototype.dblclick = function(callback) {
    this.elements.forEach(function (element) {
      element.ondblclick = callback;
    });
  };

  Dom.prototype.hover = function(callback) {
    this.elements.forEach(function (element) {
      element.onmouseover = callback;
      element.onmouseout = callback;
    });
  };

  Dom.prototype.mouseenter = function(callback) {
    this.elements.forEach(function (element) {
      element.onmouseover = callback;
    });
  };

  Dom.prototype.mouseleave = function(callback) {
    this.elements.forEach(function (element) {
      element.onmouseout = callback;
    });
  };

  Dom.prototype.mousedown = function(callback) {
    this.elements.forEach(function (element) {
      element.onmousedown = callback;
    });
  };

  Dom.prototype.mousemove = function(callback) {
    this.elements.forEach(function (element) {
      element.onmousemove = callback;
    });
  };

  Dom.prototype.mouseout = function(callback) {
    this.elements.forEach(function (element) {
      element.onmouseout = callback;
    });
  };

  Dom.prototype.mouseover = function(callback) {
    this.elements.forEach(function (element) {
      element.onmouseover = callback;
    });
  };

  Dom.prototype.mouseup = function(callback) {
    this.elements.forEach(function (element) {
      element.onmouseup = callback;
    });
  };

  Dom.prototype.on = function(event, selector, callback) {
    this.elements.forEach(function (element) {
      element.addEventListener(event, callback, false);
    });
  };

})();
;(function() {
  'use strict';

  Dom.prototype.pushStack = function(elements) {

    if(elements) {
      elements.forEach(function(element) {
        this.elements.push(element);
      }.bind(this));
    }

    return new Dom(this.elements);
  };

})();
;(function() {
  'use strict';

  Dom.prototype.attr = function(attr, val) {
    var values = [];

    if (attr && this.elements.length > 0) {
      this.elements.forEach(function(element) {
        if (val) {
          element.setAttribute(attr, val);
        } else {
          values.push(element.getAttribute(attr));
        }
      });

      if (!val) {
        return this.callee === 'get' ? values[0] : values;
      }
    }
  };

})();
;(function() {
  'use strict';

  Dom.prototype.clone = function () {
    var elements = [];

    this.elements.forEach(function(element) {
      elements.push(element.cloneNode(true));
    });

    return new Dom(elements);
  };

})();
;(function() {
  'use strict';

  Dom.prototype.append = function(elements) {
		var parents,
			children,
			fragment,
			temp,
			child;

		if(elements) {
			parents = this.elements;

			parents.forEach(function(parent, i) {
				if(typeof elements === 'string') {
					fragment = document.createDocumentFragment();
					temp = document.createElement('body');
					temp.innerHTML = elements;

					while(child = temp.firstElementChild) {
						fragment.appendChild(child);
					}
					parent.appendChild(fragment);
				} else {
					children = elements.elements;

					children.forEach(function(child) {
						parent.appendChild(child);
					});
				}
			});
		}
	};

})();
;(function() {
  'use strict';

  Dom.prototype.html = function() {
    var result = [];

    this.elements.forEach(function(element) {
      result.push(element.outerHTML);
    });

    return this.callee === 'get' ? result[0] : result;
  };

  Dom.prototype.text = function(text) {
    var result = [];

    if (text) {
      this.elements.forEach(function(element) {
        element.innerText = text;
      });
    } else {
      this.elements.forEach(function(element) {
        result.push(element.innerText);
      });
      return this.callee === 'get' ? result[0] : result;
    }
  };

  Dom.prototype.prepend = function(elements) {
    var parents,
      children,
      fragment,
      temp,
      child;

    if (elements) {
      parents = this.elements;

      parents.forEach(function(parent, i) {
        if (typeof elements === 'string') {
          parent.insertAdjacentHTML('afterbegin', elements);
        } else {
          children = elements.elements;

          children.forEach(function(child) {
            parent.insertAdjacentHTML('afterbegin', child);
          });
        }
      });
    }
  };

})();
;(function() {
  'use strict';

  Dom.prototype.empty = function() {
    this.elements.forEach(function(element) {
      element.outerHTML = null;
    });
  };

  Dom.prototype.remove = function() {
    this.elements.forEach(function(element) {
      element.parentNode.removeChild(element);
    });
  };

  Dom.prototype.detach = function() {
    var elements = [];

    this.elements.forEach(function(element) {
      elements.push(element);
      element.parentNode.removeChild(element);
    });

    return elements;
  };

  Dom.prototype.unwrap = function() {
    var parent;

    this.elements.forEach(function(element) {
      parent = element.parentNode;
      parent.outerHTML = element.outerHTML;
    });
  };

})();
;(function() {
  'use strict';

  Dom.prototype.replaceWith = function (element) {
		if(element) {
			this.elements.forEach(function (target) {
				target.outerHTML = element[0].outerHTML;
			});
		}
	};

  Dom.prototype.replaceAll = function (selector) {
    var source,
      target;

    if(this.callee === 'create') {
      source = this.elements[0];
      target = DOM.query(selector);

			target.elements.forEach(function (element) {
				element.outerHTML = source.outerHTML;
			});
		}
	};

})();
;(function() {
  'use strict';

  var CHROME = 'Chrome',
    GECKO = 'Firefox',
    IE = 'IE',
    OPERA = 'Opera',
    SAFARI = 'Safari';

  DOM.isChrome = function() {
      return getBrowserName() === CHROME;
  };

  DOM.isFirefox = function() {
      return getBrowserName() === GECKO;
  };

  DOM.isIE = function() {
      return getBrowserName() === IE;
  };

  DOM.isOpera = function() {
      return getBrowserName() === OPERA;
  };

  DOM.isSafari = function() {
      return getBrowserName() === SAFARI;
  };

  DOM.detectBrowser = function() {
      return detectBrowser();
  };

  function getBrowserName() {
    return detectBrowser().split(' ')[0];
  }

  function detectBrowser() {
      var userAgent = navigator.userAgent,
        temp,
        match = userAgent.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];

      if(/trident/i.test(match[1])) {
          temp =  /\brv[ :]+(\d+)/g.exec(userAgent) || [];
          return 'IE '+(temp[1] || '');
      }

      if(match[1] === 'Chrome'){
          temp = userAgent.match(/\b(OPR|Edge)\/(\d+)/);
          if(temp != null) {
            return temp.slice(1).join(' ').replace('OPR', 'Opera');
          }
      }

      match = match[2]? [match[1], match[2]]: [navigator.appName, navigator.appVersion, '-?'];
      if((temp = userAgent.match(/version\/(\d+)/i)) != null) {
        match.splice(1, 1, temp[1]);
      }

      return match.join(' ');
  }

})();
;(function() {
  'use strict';

  var platform = window.navigator.platform,
    MAC = 'MacIntel',
    LINUX = 'Linux',
    WINDOWS = 'Win32';

  DOM.isMac = function() {
      return platform === MAC;
  };

  DOM.isLinux = function() {
      return platform === LINUX;
  };

  DOM.isWindows = function() {
      return platform === WINDOWS;
  };

})();
;(function() {
  'use strict';

  Dom.prototype.first = function() {
    var elements = this.elements,
      element = elements ? elements[0] : this[0];

    return new Dom([element]);
  };

  Dom.prototype.last = function() {
    var elements = this.elements,
      element = elements ?
        elements[this.elements.length - 1] : this[this.length - 1];

    return new Dom([element]);
  };

  Dom.prototype.eq = function(index) {
    var offset;

    if (index) {
      offset = index < 0 ? this.elements.length : 0;
      return new Dom([this.elements[offset + index]]);
    }
  };

  Dom.prototype.map = function(callback) {
    if (callback) {
      this.elements.map(function(element) {
        callback.call(element);
      });
    }
  };

  Dom.prototype.has = function(selector) {
    if (selector) {
      return this.elements.some(function(element) {
        return Array.prototype.slice.call(element.childNodes).some(function(child) {
          return child.parentNode.querySelectorAll(selector).length > 0;
        });
      });
    }
  };

  Dom.prototype.is = function(selector) {
    var targets;

    if (selector) {
      targets = document.querySelectorAll(selector);
      return this.elements.some(function(element) {
        return Array.prototype.slice.call(targets).some(function(target) {
          return element.isEqualNode(target);
        });
      });
    }
  };

  Dom.prototype.filter = function(selector) {
    var elements = [];

    if (selector) {
      this.elements.forEach(function(element) {
        if (element.parentNode.querySelectorAll(selector).length > 0) {
          elements.push(element);
        }
      });
    }
    return new Dom(elements);
  };

  Dom.prototype.slice = function(start, end) {
    var elements = [],
      start = start || 1,
      end = end || this.elements.length;

    this.elements.forEach(function(element, index) {
      if (start < index + 2 && end > index) {
        elements.push(element);
      }
    });

    return new Dom(elements);
  };

})();
;(function() {
  'use strict';

  Dom.prototype.add = function(selector) {
    var result = [],
      newElement;

    this.elements.forEach(function(element) {
      newElement = document.createElement(selector);
      result.push(element.append(newElement));
    });

    return new Dom([newElement]);
  };

  // TODO: Pseudo classes
  Dom.prototype.not = function(selector) {
    var result = [];

    this.elements.forEach(function(element) {
      if(element.parentNode.querySelector(selector) !== element) {
        result.push(element);
      }
    });

    return new Dom(result);
  };

  Dom.prototype.each = function(callback) {
    if(callback) {
      this.elements.forEach(function(element, index) {
        callback(index);
      });
    }
  };

})();
;(function() {
  'use strict';

  Dom.prototype.children = function() {
    var children = [];

    this.elements.forEach(function(element) {
      Array.prototype.slice.call(element.children).forEach(function(child) {
        children.push(child);
      });
    });

    return new Dom(children);
  };

  Dom.prototype.find = function(selector) {
    var result;

    if (selector) {
      result = document.querySelectorAll(this.selector + ' ' + selector);
    }

    return new Dom(result);
  };

  Dom.prototype.parent = function(filter) {
    return getAncestors.call(this, filter, true);
  };

  Dom.prototype.parents = function(filter) {
    return getAncestors.call(this, filter);
  };

  Dom.prototype.offsetParent = function(filter) {
    return getAncestors.call(this, undefined, true, true);
  };

  Dom.prototype.parentsUntil = function(selector) {
    return getAncestors.call(this, undefined, undefined, selector);
  };

  Dom.prototype.closest = function(filter) {
    return closest.call(this, filter);
  };

  Dom.prototype.next = function(filter) {
    return getElementSibling.call(this, 'next', filter, true);
  };

  Dom.prototype.prev = function(filter) {
    return getElementSibling.call(this, 'prev', filter, true);
  };

  Dom.prototype.nextAll = function(filter) {
    return getElementSibling.call(this, 'next', filter);
  };

  Dom.prototype.prevAll = function(filter) {
    return getElementSibling.call(this, 'prev', filter);
  };

  Dom.prototype.nextUntil = function(filter) {
    return getElementSibling.call(this, 'next', filter, false, true);
  };

  Dom.prototype.prevUntil = function(filter) {
    return getElementSibling.call(this, 'prev', filter, false, true);
  };

  Dom.prototype.siblings = function(filter) {
    return getAllElementSiblings.call(this, filter);
  };

  function getElementSibling(position, filter, isSingle, until) {
    var result = [],
      position = position || 'next',
      prefix = this.callee === 'get' ? '#' : '',
      selector = document.querySelector(prefix + this.selector),
      sibling,
      element;

    sibling = position === 'next' ?
      selector.nextElementSibling : selector.previousElementSibling;

    if (sibling) {
      do {
        /* Insert when selector is found - nextAll(), prevAll() */
        if (!until) {
          element = filter ?
            (sibling.outerHTML.indexOf(filter) > -1 ? sibling : undefined) : sibling;
        } else {
          element = filter ?
            (sibling.outerHTML.indexOf(filter) > -1 ? undefined : sibling) : sibling;
        }

        if (element) {
          result.push(element);
        }

        /* Break if until selector is found - nextUntil(), prevUntil() */
        if (until) {
          if (sibling.outerHTML.indexOf(until) > -1) {
            break;
          }
        }
      } while (!isSingle && (sibling = sibling.nextElementSibling))
    }

    return new Dom(result);
  }

  function getAllElementSiblings(filter) {
    var result = [],
      sibling;

    sibling = this.elements[0].parentNode.firstChild;

    do {
      sibling = filter ?
        (sibling.outerHTML.indexOf(filter) > -1 ? sibling : undefined) : sibling;
      if (sibling !== this.elements[0]) {
        result.push(sibling);
      }
    } while (sibling = sibling.nextElementSibling)

    return new Dom(result);
  }

  function closest(filter) {
    var result = [],
      sibling = this.elements[0].parentNode.childNodes[1],
      match = false,
      lastSibling;

    while (!match && sibling && filter) {
      do {
        match = sibling.outerHTML.indexOf(filter) > -1;
        if (match && sibling !== this.elements[0]) {
          result.push(sibling);
          break;
        }
        lastSibling = sibling;
      } while (sibling = sibling.nextElementSibling)

      sibling = lastSibling.parentNode;
    }

    return new Dom(result);
  }

  function getAncestors(filter, isParent, until, isPositioned) {
    var parents = [],
      parent,
      position;

    this.elements.forEach(function(element) {
      parent = element.parentNode;

      do {
        if (until) {
          if (parent.querySelector(until) !== null) {
            break;
          }
        }
        if (filter) {
          if (parent.querySelector(filter) !== null) {
            parents.push(parent);
          }
        } else {
          if(isPositioned) {
            position = parent.style.position;
            if(position.indexOf('absolute') > -1 || position.indexOf('relative') > -1 || position.indexOf('fixed') > -1 ) {
              parents.push(parent);
            }
          } else {
            parents.push(parent);
          }
        }
      } while (!isParent && (parent = parent.parentNode))
    });

    return new Dom(parents);
  };

})();
;(function() {
  'use strict';

  DOM.contains = function(parent, child) {
    var parentElement,
      childElement;

    if (parent && child) {
      if (parent.elements && child.elements) {
        parentElement = parent.elements[0];
        childElement = child.elements[0];

        return parentElement !== childElement && parentElement.contains(childElement);
      } else {
        return parent !== child && parent.contains(child);
      }
    }
  };

  DOM.extend = function(target) {
    var target = target || {};

    Array.prototype.slice.call(arguments).forEach(function(argument, index) {
      var object = argument;

      if (object) {
        for (var key in object) {
          if (object.hasOwnProperty(key)) {
            if (typeof object[key] === 'object') {
              DOM.extend(target[key], object[key]);
            } else {
              target[key] = object[key];
            }
          }
        }
      }
    });

    return target;
  };

  DOM.inArray = function(element, array) {
    if (element && array) {
      return array.indexOf(element);
    }
  };

  DOM.isArray = function(array) {
    if (array) {
      return Array.isArray(array);
    }
  };

  DOM.isEmptyObject = function(object) {
    if (object) {
      for (var key in object) {
        if (object.hasOwnProperty(key)) {
          return false;
        }
      }
      return true;
    }
  };

  DOM.isFunction = function(fn) {
    if (fn) {
      return typeof fn === 'function';
    }
  };

  DOM.isPlainObject = function(object) {
    if (object) {
      return Object.prototype.toString.call(object) === '[object Object]'
    }
  };

  DOM.isWindow = function(object) {
    if (object) {
      var toString = Object.prototype.toString.call(object);
      return toString === '[object global]' ||
        toString === '[object Window]' ||
        toString === '[object DOMWindow]';
    }
  };

  DOM.isXMLDoc = function(element) {
    var documentElement;

    if (element) {
      documentElement = (element ? element.ownerDocument || element : 0).documentElement;
      return documentElement ? documentElement.nodeName !== "HTML" : false;
    }
  };

  DOM.makeArray = function(object) {
    if (object) {
      return Array.prototype.slice.call(object);
    }
  };

  DOM.map = function(elements, fn) {
    var elements = elements || [];

    if (fn) {
      elements = Array.prototype.slice.call(elements);
      return elements.map(fn);
    }
  };

  DOM.merge = function(first, second) {
    if (first && second && Array.isArray(first)) {
      return first.concat(second);
    }
  };

  DOM.noop = function() {};

  DOM.now = function() {
    return (new Date).getTime();
  };

  DOM.parseHTML = function(str) {
    var doc;

    if (str) {
      doc = document.implementation.createHTMLDocument();
      doc.body.innerHTML = str;

      return doc.body.children;
    }
  }

  DOM.parseJSON = function(str) {
    if (str) {
      return JSON.parse(str);
    }
  };

  // http://jsfiddle.net/D2QpZ/
  DOM.parseXML = function(str) {
    var parser,
      xmlDoc;

    if (str) {
      if (window.DOMParser) {
        parser = new DOMParser();
        xmlDoc = parser.parseFromString(str, "text/xml");
      } else {
        xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
        xmlDoc.async = false;
        xmlDoc.loadXML(str);
      }

      return xmlDoc;
    }
  }

  DOM.proxy = function(fn, context) {
    if (fn && context) {
      fn.bind(context);
    }
  };

  /*
   * test
   * var fn1 = function() {console.log('hello');}
   * var fn2 = function() {console.log('world');}
   * var q = DOM.queue(fn1, fn2);
   * q
   */
  DOM.queue = function() {
    var queue = [],
      args = Array.prototype.slice.call(arguments);

    args.forEach(function(arg) {
      queue.push(arg);
    });

    return queue;
  };

  /*
   * test
   * var fn1 = function() {console.log('hello');}
   * var fn2 = function() {console.log('world');}
   * var q = DOM.queue(fn1, fn2);
   * DOM.dequeue(q);
   * q;
   */
  DOM.dequeue = function(queue) {
    if (queue) {
      return queue.pop();
    }
  };

  DOM.globalEval = function(script) {
    if (script) {
      window['eval'].call(window, script);
    }
  };

  /*
    var a = [1,2,3,4,5,6];
    DOM.grep(a, function(b) {return b%2 === 1;}) => [1,3,5]
  */

  DOM.grep = function(array, fn) {
    var result = [];

    if (array && fn) {
      array.forEach(function(item) {
        if (fn(item)) {
          result.push(item);
        }
      });

      return result;
    }
  };

  DOM.trim = function(str) {
    if(str && typeof(str) === 'string') {
      return str.trim();
    }
  };

  /*
    var array = [5,4,15,3,4,2,1];
    DOM.unique(array); => [5, 4, 15, 3, 2, 1]
  */
  DOM.unique = function(array) {
    var result = [];

    if(array && Array.isArray(array)) {
      array.forEach(function(element) {
        if(result.indexOf(element) === -1) {
          result.push(element);
        }
      });
    }

    return result;
  };

})();

//# sourceMappingURL=main.min.js.map